User Story: The user shall be able create a quote in the database with a tag associate to it. The user shall be able to search quotes by tag. 

@Test
public void quote_setTag() {
    Quote q = new Quote();
    q.setTag("round");
    assertEquals("Expected:", "round", q.getTag());
}

For this first test, we're checking to see if we can successfully create a new Quote with a tag associated with it. This starts the ability to search for Quotes with a given tag. 

For refactoring, we needed to add a field in the Quote object and a setTag() and getTag() methods. Once we did this, the test passed. 

//this adds a quote with a tag to the database, then searches for a quote by that tag and compares the result quote with the one added earlier
@Test
public void add_tag_and_search() {
    Quote newQuote = new Quote("this is a test quote", "test author", "test tag");
    quoteserve qserve = new quoteserve();
    qserve.loadQuotes();
    qserve.addQuote(newQuote.getQuoteText(), newQuote.getAuthor(), newQuote.getTag());
    QuoteList tagSearchResults = qserve.findQuotes(newQuote.getTag(), "tag");
    
    assertTrue( tagSearchResults.getSize() == 1 && quotesAreEqual(tagSearchResults.getQuote(0), newQuote) );
}   


This next test combines testing the functionality of creating a new Quote object, then saving that quote object into the xml file and then reloading the quote. It in essence tests both functionality of adding a quote to the database and searching for that same quote in the database. 

Refactoring for this was a little more intense. We needed to modify the Quote constructor to pass in a tag. We also needed to modify the quoteserve.java document with the ability to add a quote into the database with a "tag". Then, we needed to modify the QuoteList object to make it searchable via a "tag". Lastly, we needed to make sure the xml file loads a quote's tag successfully by finding a tag section of the xml document and adding it to the Quote object and then to the QuoteList. Once this was completed, the test successfully passed. 

//helper method that returns whether two quotes have identical text, author, and tag fields
boolean quotesAreEqual(Quote q1, Quote q2)
{
    return q1.getQuoteText().equals(q2.getQuoteText()) &&
            q1.getAuthor().equals(q2.getAuthor()) &&
            q1.getTag().equals(q2.getTag());
}

This is simply a helper method of code which could potentially be reused. 