1. 
The part of each test which addresses observability is the assertTrue statements. These statements observe the result of running each test and can compare the observed output with an expected output. 

The part of each test which addresses controllability is the line which calls the search() method in QuoteList.java and the line of code which imports the quotes from the XML file. This is because both of these lines control some aspects of the state in which the program is and the outputs it will eventually produce. 






2. 
Please Note: this analysis assumes that the testRemoveDuplicates() test is meant to check that the first instance of the duplicate String is not removed. It does not check whether the duplicate String is actually removed. 

A. The test file does not correspond to the RIPR model because it does not effectively show a failure with respect to the removeDuplicates() method’s functionality. In this test, we are unable to show an infected state because the intended behavior of this particular testRemoveDuplicates() test should remove the duplicate instance of the word “cake”. Since “cake” is not one of the first Strings in the words Object, we are unable to reveal the propagation of a potential error with removing a duplicate item. It is unlikely this test will propagate an error unless removeDuplicates() somehow removed the first item in the list of strings in the words Object which in this case is “cookie”. 


B. Assuming the behavior of this test is to check whether the first duplicate item is left in tact as defined above, I’d write the test as

@Test
public void testRemoveDuplicates()
{
   words.add ("cookie");
   words.add ("cake");
   words.add ("cookie");
   words.add ("pie");
   words.removeDuplicates();
   assertTrue ("removeDuplicates method", words.getFirst().equals ("cookie"));
}

Now we can test to make sure that the removeDuplicates() method does not modify the first instance of the word “cookie”. 


